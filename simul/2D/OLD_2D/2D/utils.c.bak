#include "utils.h"
#include <stdio.h>

const double SQRT_2PI = 2.5066282746310005024157652848110452530069867406099;
const double CORR_LENGTH = 0.1;
const double DAMP_RATE   = 0.5;
const double SQRT_C0 = 1.0;
const double VARIANCE = 0.5;

void init()
{
	CORR_LENGTH2 = CORR_LENGTH*CORR_LENGTH;
	SIGMA = sqrt(VARIANCE);
}

double randGaussian()
{
	/*
	static double V1, V2, S;
	static int phase = 1;
	double X;

	if(phase) {
		do {
			double U1 = rand01();
			double U2 = rand01();

			V1 = 2 * U1 - 1;
			V2 = 2 * U2 - 1;
			S = V1 * V1 + V2 * V2;
			} while(S >= 1 || S == 0);

		X = V1 * sqrt(-2 * log(S) / S);
	} else
		X = V2 * sqrt(-2 * log(S) / S);

	phase = 1 - phase;

	return X;
	*/
	
	double S = 0.0, U, V;
	
	while (S == 0.0 || S >= 1.0)
	{
		U = 2*rand1()-1;
		V = 2*rand1()-1;
		S = U*U + V*V;
	}
	return U * sqrt(-2.0 * log(S) / S);
}

void computeA(struct Complex** a, int nTerms, int mid)
{
	int i, j;
	for (i = 0; i < nTerms; i++)
	{
		for (j = mid; j < nTerms; j++)
		{
			a[i][j].real = randGauss(0, INV_SQRT_2);
			a[i][j].imag = randGauss(0, INV_SQRT_2);
			
			a[2*mid-i][2*mid-j].real = a[i][j].real;
			a[2*mid-i][2*mid-j].imag = -a[i][j].imag;
			/*
			printf("i1 = %d, j1 = %d\ni2 = %d, j2 = %d\nIm a1 = %f\nIm a2 = %f\n", 
					i, j, 2*mid-i, 2*mid-j,
					a[i][j].imag, a[2*mid-i][2*mid-j].imag);
			*/
		}
	}
    a[mid][mid].real = randGauss(0, 1);
	a[mid][mid].imag = 0.0;
}

double scalarField(struct Vector2* pos, struct Complex** a, 
                    int nTerms, int mid, double sigma)
{
	double sum = 0.0;
	int i, j;
	double sum2 = 0.0;
	for (i = 0; i < nTerms; i++)
	{
		double kx = i - mid;
		kx *= TWO_PI;
		for (j = 0; j < nTerms; j++)
		{
			double ky = j - mid;
			ky *= TWO_PI;
			double k2 = kx*kx + ky*ky;
			double angle = kx*pos->x + ky*pos->y;
			sum += (a[i][j].real*cos(angle) - a[i][j].imag*sin(angle)) * 
					exp(-k2*CORR_LENGTH2/4.0);
			//sum += a[i][j].real;
			//printf("angle = %f    (ska vara 0)\n", angle);
			//printf("sum = %f    ==    %f = a.real  ??\n", sum*, a[i][j].real);
		}
	}
	//printf("sum = %f\n", sum);
	return SQRT_2PI * CORR_LENGTH * SQRT_C0 * sum;
}

void flowVel(struct Vector2* pos, struct Complex** a, 
        int nTerms, struct Vector2* u, int mid, double sigma, double dx)
{
	struct Vector2 plusd;
	struct Vector2 minusd;

	plusd.x = pos->x + dx;

	plusd.y = pos->y;
	minusd.x = pos->x - dx;
	minusd.y = pos->y;
	u->y = (scalarField(&minusd, a, nTerms, mid, sigma) - 
           scalarField(&plusd, a, nTerms, mid, sigma)) / 2 / dx;
	plusd.x = pos->x;
	plusd.y = pos->y + dx;
	minusd.x = pos->x;
	minusd.y = pos->y - dx;
	u->x = (scalarField(&plusd, a, nTerms, mid, sigma) - 
           scalarField(&minusd, a, nTerms, mid, sigma)) / 2 / dx;
}
